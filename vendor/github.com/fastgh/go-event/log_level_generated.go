// Code generated by "enumer -gqlgen -json -sql -text -yaml -type LogLevel -output log_level_generated.go -trimprefix LogLevel -transform upper"; DO NOT EDIT.

package event

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const (
	_LogLevelName_0      = "ANYWAYDEBUGINFOERROR"
	_LogLevelLowerName_0 = "anywaydebuginfoerror"
	_LogLevelName_1      = "SILIENT"
	_LogLevelLowerName_1 = "silient"
)

var (
	_LogLevelIndex_0 = [...]uint8{0, 6, 11, 15, 20}
	_LogLevelIndex_1 = [...]uint8{0, 7}
)

func (i LogLevel) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _LogLevelName_0[_LogLevelIndex_0[i]:_LogLevelIndex_0[i+1]]
	case i == 127:
		return _LogLevelName_1
	default:
		return fmt.Sprintf("LogLevel(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LogLevelNoOp() {
	var x [1]struct{}
	_ = x[LogLevelAnyway-(0)]
	_ = x[LogLevelDebug-(1)]
	_ = x[LogLevelInfo-(2)]
	_ = x[LogLevelError-(3)]
	_ = x[LogLevelSilient-(127)]
}

var _LogLevelValues = []LogLevel{LogLevelAnyway, LogLevelDebug, LogLevelInfo, LogLevelError, LogLevelSilient}

var _LogLevelNameToValueMap = map[string]LogLevel{
	_LogLevelName_0[0:6]:        LogLevelAnyway,
	_LogLevelLowerName_0[0:6]:   LogLevelAnyway,
	_LogLevelName_0[6:11]:       LogLevelDebug,
	_LogLevelLowerName_0[6:11]:  LogLevelDebug,
	_LogLevelName_0[11:15]:      LogLevelInfo,
	_LogLevelLowerName_0[11:15]: LogLevelInfo,
	_LogLevelName_0[15:20]:      LogLevelError,
	_LogLevelLowerName_0[15:20]: LogLevelError,
	_LogLevelName_1[0:7]:        LogLevelSilient,
	_LogLevelLowerName_1[0:7]:   LogLevelSilient,
}

var _LogLevelNames = []string{
	_LogLevelName_0[0:6],
	_LogLevelName_0[6:11],
	_LogLevelName_0[11:15],
	_LogLevelName_0[15:20],
	_LogLevelName_1[0:7],
}

// LogLevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LogLevelString(s string) (LogLevel, error) {
	if val, ok := _LogLevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LogLevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LogLevel values", s)
}

// LogLevelValues returns all values of the enum
func LogLevelValues() []LogLevel {
	return _LogLevelValues
}

// LogLevelStrings returns a slice of all String values of the enum
func LogLevelStrings() []string {
	strs := make([]string, len(_LogLevelNames))
	copy(strs, _LogLevelNames)
	return strs
}

// IsALogLevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LogLevel) IsALogLevel() bool {
	for _, v := range _LogLevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for LogLevel
func (i LogLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for LogLevel
func (i *LogLevel) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LogLevel should be a string, got %s", data)
	}

	var err error
	*i, err = LogLevelString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for LogLevel
func (i LogLevel) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for LogLevel
func (i *LogLevel) UnmarshalText(text []byte) error {
	var err error
	*i, err = LogLevelString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for LogLevel
func (i LogLevel) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for LogLevel
func (i *LogLevel) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = LogLevelString(s)
	return err
}

func (i LogLevel) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *LogLevel) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of LogLevel: %[1]T(%[1]v)", value)
	}

	val, err := LogLevelString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for LogLevel
func (i LogLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for LogLevel
func (i *LogLevel) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("LogLevel should be a string, got %T", value)
	}

	var err error
	*i, err = LogLevelString(str)
	return err
}
