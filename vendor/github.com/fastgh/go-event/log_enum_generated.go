// Code generated by "enumer -gqlgen -json -sql -text -yaml -type LogEnum -output log_enum_generated.go -transform whitespace"; DO NOT EDIT.

package event

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _LogEnumName = "hub close beginhub close oklistener sub oklistener sub errlistener unsub oklistener unsub errlistener close beginlistener close oktopic register begintopic register oktopic close begintopic close okevent pub beginevent pub okevent send beginevent send okevent handle beginevent handle okevent handle err"

var _LogEnumIndex = [...]uint16{0, 15, 27, 42, 58, 75, 93, 113, 130, 150, 167, 184, 198, 213, 225, 241, 254, 272, 287, 303}

const _LogEnumLowerName = "hub close beginhub close oklistener sub oklistener sub errlistener unsub oklistener unsub errlistener close beginlistener close oktopic register begintopic register oktopic close begintopic close okevent pub beginevent pub okevent send beginevent send okevent handle beginevent handle okevent handle err"

func (i LogEnum) String() string {
	if i < 0 || i >= LogEnum(len(_LogEnumIndex)-1) {
		return fmt.Sprintf("LogEnum(%d)", i)
	}
	return _LogEnumName[_LogEnumIndex[i]:_LogEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LogEnumNoOp() {
	var x [1]struct{}
	_ = x[HubCloseBegin-(0)]
	_ = x[HubCloseOk-(1)]
	_ = x[ListenerSubOk-(2)]
	_ = x[ListenerSubErr-(3)]
	_ = x[ListenerUnsubOk-(4)]
	_ = x[ListenerUnsubErr-(5)]
	_ = x[ListenerCloseBegin-(6)]
	_ = x[ListenerCloseOk-(7)]
	_ = x[TopicRegisterBegin-(8)]
	_ = x[TopicRegisterOk-(9)]
	_ = x[TopicCloseBegin-(10)]
	_ = x[TopicCloseOk-(11)]
	_ = x[EventPubBegin-(12)]
	_ = x[EventPubOk-(13)]
	_ = x[EventSendBegin-(14)]
	_ = x[EventSendOk-(15)]
	_ = x[EventHandleBegin-(16)]
	_ = x[EventHandleOk-(17)]
	_ = x[EventHandleErr-(18)]
}

var _LogEnumValues = []LogEnum{HubCloseBegin, HubCloseOk, ListenerSubOk, ListenerSubErr, ListenerUnsubOk, ListenerUnsubErr, ListenerCloseBegin, ListenerCloseOk, TopicRegisterBegin, TopicRegisterOk, TopicCloseBegin, TopicCloseOk, EventPubBegin, EventPubOk, EventSendBegin, EventSendOk, EventHandleBegin, EventHandleOk, EventHandleErr}

var _LogEnumNameToValueMap = map[string]LogEnum{
	_LogEnumName[0:15]:         HubCloseBegin,
	_LogEnumLowerName[0:15]:    HubCloseBegin,
	_LogEnumName[15:27]:        HubCloseOk,
	_LogEnumLowerName[15:27]:   HubCloseOk,
	_LogEnumName[27:42]:        ListenerSubOk,
	_LogEnumLowerName[27:42]:   ListenerSubOk,
	_LogEnumName[42:58]:        ListenerSubErr,
	_LogEnumLowerName[42:58]:   ListenerSubErr,
	_LogEnumName[58:75]:        ListenerUnsubOk,
	_LogEnumLowerName[58:75]:   ListenerUnsubOk,
	_LogEnumName[75:93]:        ListenerUnsubErr,
	_LogEnumLowerName[75:93]:   ListenerUnsubErr,
	_LogEnumName[93:113]:       ListenerCloseBegin,
	_LogEnumLowerName[93:113]:  ListenerCloseBegin,
	_LogEnumName[113:130]:      ListenerCloseOk,
	_LogEnumLowerName[113:130]: ListenerCloseOk,
	_LogEnumName[130:150]:      TopicRegisterBegin,
	_LogEnumLowerName[130:150]: TopicRegisterBegin,
	_LogEnumName[150:167]:      TopicRegisterOk,
	_LogEnumLowerName[150:167]: TopicRegisterOk,
	_LogEnumName[167:184]:      TopicCloseBegin,
	_LogEnumLowerName[167:184]: TopicCloseBegin,
	_LogEnumName[184:198]:      TopicCloseOk,
	_LogEnumLowerName[184:198]: TopicCloseOk,
	_LogEnumName[198:213]:      EventPubBegin,
	_LogEnumLowerName[198:213]: EventPubBegin,
	_LogEnumName[213:225]:      EventPubOk,
	_LogEnumLowerName[213:225]: EventPubOk,
	_LogEnumName[225:241]:      EventSendBegin,
	_LogEnumLowerName[225:241]: EventSendBegin,
	_LogEnumName[241:254]:      EventSendOk,
	_LogEnumLowerName[241:254]: EventSendOk,
	_LogEnumName[254:272]:      EventHandleBegin,
	_LogEnumLowerName[254:272]: EventHandleBegin,
	_LogEnumName[272:287]:      EventHandleOk,
	_LogEnumLowerName[272:287]: EventHandleOk,
	_LogEnumName[287:303]:      EventHandleErr,
	_LogEnumLowerName[287:303]: EventHandleErr,
}

var _LogEnumNames = []string{
	_LogEnumName[0:15],
	_LogEnumName[15:27],
	_LogEnumName[27:42],
	_LogEnumName[42:58],
	_LogEnumName[58:75],
	_LogEnumName[75:93],
	_LogEnumName[93:113],
	_LogEnumName[113:130],
	_LogEnumName[130:150],
	_LogEnumName[150:167],
	_LogEnumName[167:184],
	_LogEnumName[184:198],
	_LogEnumName[198:213],
	_LogEnumName[213:225],
	_LogEnumName[225:241],
	_LogEnumName[241:254],
	_LogEnumName[254:272],
	_LogEnumName[272:287],
	_LogEnumName[287:303],
}

// LogEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LogEnumString(s string) (LogEnum, error) {
	if val, ok := _LogEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LogEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LogEnum values", s)
}

// LogEnumValues returns all values of the enum
func LogEnumValues() []LogEnum {
	return _LogEnumValues
}

// LogEnumStrings returns a slice of all String values of the enum
func LogEnumStrings() []string {
	strs := make([]string, len(_LogEnumNames))
	copy(strs, _LogEnumNames)
	return strs
}

// IsALogEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LogEnum) IsALogEnum() bool {
	for _, v := range _LogEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for LogEnum
func (i LogEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for LogEnum
func (i *LogEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LogEnum should be a string, got %s", data)
	}

	var err error
	*i, err = LogEnumString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for LogEnum
func (i LogEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for LogEnum
func (i *LogEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = LogEnumString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for LogEnum
func (i LogEnum) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for LogEnum
func (i *LogEnum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = LogEnumString(s)
	return err
}

func (i LogEnum) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *LogEnum) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of LogEnum: %[1]T(%[1]v)", value)
	}

	val, err := LogEnumString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for LogEnum
func (i LogEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for LogEnum
func (i *LogEnum) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("LogEnum should be a string, got %T", value)
	}

	var err error
	*i, err = LogEnumString(str)
	return err
}
